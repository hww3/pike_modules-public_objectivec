#!/bin/sh


echo making app for $1

APPNAME=$1

cat << EOF > ${APPNAME}.m

#import <Pike/OCPikeInterpreter.h>
#import <Foundation/NSString.h>
#import <Foundation/NSAutoreleasePool.h>
#import <AppKit/NSApplication.h>
#import <Foundation/NSObjCRuntime.h>

int main(int argc, char** argv) { 
struct object * m;
id i; 
struct svalue * sv;

// required for console mode objective c applications 
NSAutoreleasePool *innerPool = [[NSAutoreleasePool alloc] init];

// these 2 lines set up and start the interpreter. 
i = [OCPikeInterpreter sharedInterpreter]; 
[i startInterpreter];

[NSApplication sharedApplication];

// ok, now that we have things set up, let's use it. 
// first, an example of calling pike c level apis directly. 
f_version(0); 
printf("%s\n", Pike_sp[-1].u.string->str); 
pop_stack();
 m = load_pike_master();

 push_text("../Resources/");
 f_cd(1);

  
 push_text(argv[0]);
 apply(m, "dirname", 1);
  f_cd(1);
  push_text("../Resources");
  apply(m, "cd", 1);
  f_getcwd(0);

 printf("%s\n", Pike_sp[-1].u.string->str); 

 apply(m, "add_program_path", 1); 

push_text("Public.ObjectiveC");
apply(m,"resolv", 1);
pop_stack();
 push_text(argv[0]);
 push_text("foo");
 push_text("$APPNAME.pike");
 f_aggregate(2);
apply(m, "_main", 1); 
// finally, we clean up. 
[i stopInterpreter]; 
[innerPool release]; 
return 0; 
}


EOF

echo "building stub..."

gcc -arch i386 -F. -c "${APPNAME}.m" -o "${APPNAME}.o"
gcc -arch i386 "${APPNAME}.o" -o "${APPNAME}" -F.  -framework AppKit -framework Pike -framework System -framework Foundation

if [ ! -d "./${APPNAME}.app" ] ;
then
  echo "creating app bundle..."
  mkdir -p "${APPNAME}.app/Contents/MacOS"
  mkdir -p "${APPNAME}.app/Contents/Resources"
  mkdir -p "${APPNAME}.app/Contents/Frameworks"
  cp -rf Pike.framework "${APPNAME}.app/Contents/Frameworks"

cat << EOF > "${APPNAME}.app/Contents/Resources/${APPNAME}.pike"

import Public.ObjectiveC;
object NSApp;

int main(int argc, array argv)
{
  NSApp = Cocoa.NSApplication.sharedApplication();
  add_constant("NSApp", NSApp);
  NSApp->activateIgnoringOtherApps_(1);

  add_backend_to_runloop(Pike.DefaultBackend, 0.3);
//  return AppKit()->NSApplicationMain(argc, argv);
return 0;
}

EOF

# create bundle special files.
cat << EOF > ${APPNAME}.app/Contents/PkgInfo
gInfo 
APPL????
EOF

cat << EOF > ${APPNAME}.app/Contents/Info.plist

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.
com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>CFBundleDevelopmentRegion</key>
        <string>English</string>
        <key>CFBundleExecutable</key>
        <string>${APPNAME}</string>
        <key>CFBundleGetInfoString</key>
        <string>1.0, foo</string>
        <key>CFBundleIdentifier</key>
        <string>org.gotpike.${APPNAME}</string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>CFBundleSignature</key>
        <string>WvTx</string>
        <key>NSMainNibFile</key>
        <string>MainMenu</string>
        <key>NSPrincipalClass</key>
        <string>NSApplication</string>
</dict>
</plist>
EOF

fi

mv "${APPNAME}" "${APPNAME}.app/Contents/MacOS"

rm "${APPNAME}.m" "${APPNAME}.o"
