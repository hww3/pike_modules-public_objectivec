#include "piobjc.h"

EXTRA
{
  add_string_constant("__version", "0.1", 0);
  add_string_constant("__author", "Bill Welliver <bill@welliver.org>", 0);

  pike_init_piobjc_nsclass();
  pike_init_piobjc_nsobject();
  pike_init_piobjc_methodwrapper();
}

INIT
{

}

EXIT
{
  pike_exit_piobjc_nsclass();
  pike_exit_piobjc_nsobject();
  pike_exit_piobjc_methodwrapper();
}

unsigned pike_objc_type_alignment(char** typeptr){
	unsigned result=0;
	char* type=*typeptr;
	start:{
		char this=*type;
		type++;
		switch(this){
			case 'b':
#ifndef __NEXT_RUNTIME__
				pike_objc_type_skip_number(type);
				result=pike_objc_type_alignment(&type);
				pike_objc_type_skip_number(type);
				break;
#else
				result=__alignof__(int);
				pike_objc_type_skip_number(type);
				break;
#endif
			case 'c':
				result=__alignof__(char);
				break;
			case 'C':
				result=__alignof__(unsigned char);
				break;
			case 'd':
				result=__alignof__(double);
				break;
			case 'f':
				result=__alignof__(float);
				break;
			case 'i':
				result=__alignof__(int);
				break;
			case 'I':
				result=__alignof__(unsigned int);
				break;
			case 'l':
				result=__alignof__(long);
				break;
			case 'L':
				result=__alignof__(unsigned long);
				break;
			case 'n':
			case 'N':
			case 'o':
			case 'O':
				goto start;
			case 'q':
				result=__alignof__(long long);
				break;
			case 'Q':
				result=__alignof__(unsigned long long);
				break;
			case 'r':
				goto start;
			case 's':
				result=__alignof__(short);
				break;
			case 'S':
				result=__alignof__(unsigned short);
				break;
			case 'v':
				result=__alignof__(void);
				break;
			case 'V':
				goto start;
			case '@':
				result=__alignof__(id);
				break;
			case '#':
				result=__alignof__(Class);
				break;
			case '^':
				result=__alignof__(void*);
				pike_objc_type_alignment(&type);
				break;
			case '*':
				result=__alignof__(char*);
				break;
			case ':':
				result=__alignof__(SEL);
				break;
			case '(':{
				pike_objc_type_skip_name(type);
				if(*type){
					while((*type)&&(*type!=')')){
						unsigned alignment=pike_objc_type_alignment(&type);
						if(alignment>result)
							result=alignment;
						}
					pike_objc_type_skip_past_char(type,')');
					}
				break;
				}
			case '[':{
				pike_objc_type_skip_number(type);
				if(*type){
					unsigned alignment=pike_objc_type_alignment(&type);
					pike_objc_type_skip_past_char(type,']');
					result=alignment;
					}
				break;
				}
			case '{':{
				pike_objc_type_skip_name(type);
				if(*type){
					while((*type)&&(*type!='}')){
						unsigned alignment=pike_objc_type_alignment(&type);
						if(alignment>result)
							result=alignment;
						}
					pike_objc_type_skip_past_char(type,'}');
					}
				break;
				}
			case '?':
			default:
				result=0;
			}
		pike_objc_type_skip_number(type);
		}
	*typeptr=(result?type:nil);
	return result;
	}


unsigned pike_objc_type_size(char** typeptr){
	unsigned result=0;
	char* type=*typeptr;
	start:{
		char this=*type;
		type++;
		switch(this){
			case 'b':
#ifndef __NEXT_RUNTIME__
				pike_objc_type_skip_number(type);
				result=pike_objc_type_size(&type);
				pike_objc_type_skip_number(type);
				break;
#else
				result=sizeof(int);
				pike_objc_type_skip_number(type);
				break;
#endif
			case 'c':
				result=sizeof(char);
				break;
			case 'C':
				result=sizeof(unsigned char);
				break;
			case 'd':
				result=sizeof(double);
				break;
			case 'f':
				result=sizeof(float);
				break;
			case 'i':
				result=sizeof(int);
				break;
			case 'I':
				result=sizeof(unsigned int);
				break;
			case 'l':
				result=sizeof(long);
				break;
			case 'L':
				result=sizeof(unsigned long);
				break;
			case 'n':
			case 'N':
			case 'o':
			case 'O':
				goto start;
			case 'q':
				result=sizeof(long long);
				break;
			case 'Q':
				result=sizeof(unsigned long long);
				break;
			case 'r':
				goto start;
			case 's':
				result=sizeof(short);
				break;
			case 'S':
				result=sizeof(unsigned short);
				break;
			case 'v':
				result=sizeof(void);
				break;
			case 'V':
				goto start;
			case '@':
				result=sizeof(id);
				break;
			case '#':
				result=sizeof(Class);
				break;
			case '^':
				result=sizeof(void*);
				pike_objc_type_size(&type);
				break;
			case '*':
				result=sizeof(char*);
				break;
			case ':':
				result=sizeof(SEL);
				break;
			case '(':{
				pike_objc_type_skip_name(type);
				if(*type){
					while((*type)&&(*type!=')')){
						unsigned size=pike_objc_type_size(&type);
						if(size>result)
							result=size;
						}
					pike_objc_type_skip_past_char(type,')');
					}
				break;
				}
			case '[':{
				unsigned count=0;
				while((*type)&&((*type)>='0')&&((*type)<='9')){
					count=((*type)-'0')+(count*10);
					type++;
					}
				if(*type){
					result=count*pike_objc_type_size(&type);
					pike_objc_type_skip_past_char(type,']');
					}
				else
					result=0;
				break;
				}
			case '{':{
				unsigned max_alignment=0;
				unsigned padding;
				char* temp;
				unsigned this_alignment;
				pike_objc_type_skip_name(type);
				if(*type){
					while((*type)&&(*type!='}')){
						temp=type;
						this_alignment=pike_objc_type_alignment(&temp);

						if(this_alignment>4)
							this_alignment=4;
						if(this_alignment>max_alignment)
							max_alignment=this_alignment;

						if(result&(this_alignment-1))
							padding=this_alignment-((result&(this_alignment-1)));
						else
							padding=0;
						result=result+pike_objc_type_size(&type)+padding;
						}
					if(result&(max_alignment-1))
						padding=max_alignment-((result&(max_alignment-1)));
					else
						padding=0;
					result=result+padding;
					pike_objc_type_skip_past_char(type,'}');
					}
				break;
				}
			case '?':
			default:
				result=0;
			}
		pike_objc_type_skip_number(type);
		}
	*typeptr=(result?type:nil);
	return result;
	}
