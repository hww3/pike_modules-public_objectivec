/* 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * $Id: Foundation.mmod,v 1.3 2007-11-29 00:35:47 hww3 Exp $
 */

/*
 * File licensing and authorship information block.
 *
 * Version: MPL 1.1/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Initial Developer of the Original Code is
 *
 * Bill Welliver <hww3@riverweb.com>
 *
 * Portions created by the Initial Developer are Copyright (C) Bill Welliver
 * All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of the LGPL, and not to allow others to use your version
 * of this file under the terms of the MPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL or the LGPL.
 *
 * Significant Contributors to this file are:
 *
 */

/*! @module Public
 */

/*! @module ObjectiveC
 */

/*! @class Foundation
 */
#import <Foundation/NSDate.h>
#import <Foundation/NSRunLoop.h>
#import <AppKit/NSApplication.h>
#import <Foundation/NSBundle.h>
#import <Foundation/NSString.h>
#import <Foundation/NSGeometry.h>

 #define _GNU_SOURCE
 #define THIS_IS_FOUNDATION 1
#include "libffi/include/ffi.h"
 #include "piobjc.h"
#include "macros.h"

 PIKECLASS Foundation
 {

  PIKECLASS NSStructWrapper
  {
    CVAR void * value;
    CVAR void * decode;
    CVAR void * encode;

	INIT
	{
	
	}
	EXIT
	{
	
	}
  }

  PIKECLASS NSRect
  {
	INHERIT Foundation_NSStructWrapper;
	
	PIKEFUN void create(float x, float y, float width, float height)
	{
	  NSRect * r;
	  unsigned int ar;
	  unsigned int sr;
	
	  THIS->value = malloc(sizeof(NSRect));
      r = (NSRect *)THIS->value;
      r->origin.x = x;
      r->origin.y = y;
      r->size.width = width;
      r->size.height = height;

	  NSGetSizeAndAlignment(@encode(NSRect), &sr, &ar);
	  printf("rect: %s\n", @encode(NSRect));
	  printf("size of rect: %d\n", sizeof(NSRect));
	  printf("size of rect: %d\n", sr);
	  printf("align of rect: %d\n", ar);
	}
	
	PIKEFUN array to_array()
	{
	  NSRect * r = (NSRect *)THIS->value;
	  push_float(r->origin.x);
	  push_float(r->origin.y);
	  f_aggregate(2);
      push_float(r->size.width);
      push_float(r->size.height);
	  f_aggregate(2);
	  f_aggregate(2);
	}
    void encode_nsrect(void * obj_storage, void * structure)
    {
       structure = THIS->value;
    }

    void decode_nsrect(void * structure, void * obj_storage)
    {
       THIS->value = structure;
    }

    INIT
    {
       THIS->decode = decode_nsrect;
       THIS->encode = encode_nsrect;
    }

    EXIT 
    {
       if(THIS->value);
         free(THIS->value);
    }

    EXTRA
	{
		add_string_constant("_signature", "{_NSRect={_NSPoint=ff}{_NSSize=ff}}", 0);
	}
  }

  PIKEFUN int NSIsEmptyRect(object rect)
  {
    NSRect * r;
	struct Foundation_NSStructWrapper_struct * s;

	s = get_storage(rect, Foundation_NSStructWrapper_program);
	if(!s) Pike_error("Expected Struct object.\n");

    r = (NSRect *)s->value;
    push_int(NSIsEmptyRect(*r));
  }

  PIKEFUN program NSClassFromString(string aClassName)
  {
	id cn;
	Class cl;
	struct program * pprog;
	
	cn = [NSString stringWithUTF8String: aClassName->str];
	
	cl = NSClassFromString(cn);

	if(!cl) RETURN(0);
	else 
	{
	  pop_stack();
      pprog = wrap_objc_class(cl);

	  push_program(pprog);
	  return;
	}
  }

  PIKEFUN string NSFullUserName()
  {
	id n;
	
	n = NSFullUserName();
	
	push_text([n UTF8String]);
	f_utf8_to_string(1);
	return;
  }

  PIKEFUN string NSUserName()
  {
	id n;
	
	n = NSUserName();
	
	push_text([n UTF8String]);
	f_utf8_to_string(1);
	return;
  }

  PIKEFUN string NSHomeDirectory()
  {
	id n;
	
	n = NSHomeDirectory();
	
	push_text([n UTF8String]);
	f_utf8_to_string(1);
	return;
  }

  PIKEFUN string NSTemporaryDirectory()
  {
	id n;
	
	n = NSTemporaryDirectory();
	
	push_text([n UTF8String]);
	f_utf8_to_string(1);
	return;
  }
   INIT
   {
	  printf("registering\n");
   }

   EXIT 
   {
   }

 }


 void pike_init_piobjc_foundation()
 {
   INIT
 }

 void pike_exit_piobjc_foundation()
 {
   EXIT
 }

